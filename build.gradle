//
group "org.polypheny"


def versionMajor = 1
def versionMinor = 5
def versionQualifier = "-SNAPSHOT"
version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "5.2.0"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "4.1.6"
        // SonarQube (https://plugins.gradle.org/plugin/org.sonarqube, GNU LGPL 3)
        classpath group: 'org.sonarsource.scanner.gradle', name: 'sonarqube-gradle-plugin', version: '2.8'
    }
}


repositories {
    mavenCentral()
    jcenter()
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    maven {
        url "https://clojars.org/repo/"
    }
}


apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'org.sonarqube'


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}


configurations.all {
    // check for updates every build
    resolutionStrategy{
        cacheChangingModulesFor 0, 'seconds'
    }
}


def avaticaVersion = '1.16.1-POLYPHENY-SNAPSHOT'

dependencies {
    ////// APACHE CALCITE AVATICA
    compile group: "org.apache.calcite.avatica", name: "avatica-core", version: avaticaVersion  // License: Apache 2.0

    ////// APACHE COMMONS LANG
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.7"

    ////// LOGGING
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' // License: MIT


    // --- Test Compile ---
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: "org.testng", name: "testng", version: "6.10"
    testCompile group: 'org.apache.calcite.avatica', name: 'avatica-server', version: avaticaVersion
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}


/**
 * JARs
 */
jar {
    manifest {
        attributes 'Manifest-Version': '1.0'
        attributes 'Copyright': 'The Polypheny Project'
        attributes 'Version': "${project.version}"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    archiveClassifier = ''
    mergeServiceFiles() // merge the META-INF/services/java.sql.Driver files
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'module-info.class', 'META-INF/services/com.fasterxml.jackson.core.*')
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}

publishing {
    publications {
        "${project.name}"(MavenPublication) {
            from components.java
            artifact jar
            artifact source: sourcesJar, classifier: 'sources', extension: 'jar'
            artifact source: javadocJar, classifier: 'javadoc', extension: 'jar'
            pom {
                licenses {
                    license {
                        name = 'Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
            }
        }
    }
}
task generatePom(group: 'publishing', dependsOn: "generatePomFileFor${project.name.capitalize()}Publication")


/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}
