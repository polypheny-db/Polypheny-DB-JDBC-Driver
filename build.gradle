
group "org.polypheny"


def versionMajor = 1
def versionMinor = 2
def versionQualifier = ""
version = versionMajor + "." + versionMinor + versionQualifier


buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
		// Shadowing; used to make a fat jar (https://github.com/johnrengelman/shadow)
        classpath group: "com.github.jengelman.gradle.plugins", name: "shadow", version: "5.0.0"
        // Lombok (https://plugins.gradle.org/plugin/io.freefair.lombok)
        classpath group: "io.freefair.gradle", name: "lombok-plugin", version: "4.1.6"
    }
}


repositories {
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
    maven {
        // DBIS Nexus
        url "https://dbis-nexus.dmi.unibas.ch/repository/maven2/"
    }
    maven {
        url "https://clojars.org/repo/"
    }
    mavenCentral()
    jcenter()
}


apply plugin: "java"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "io.freefair.lombok"
apply plugin: "com.github.johnrengelman.shadow"


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}


configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}


dependencies {
    ////// APACHE CALCITE AVATICA
    compile group: "org.apache.calcite.avatica", name: "avatica-core", version: "1.16.0-POLYPHENY-SNAPSHOT"  // License: Apache 2.0

    ////// APACHE COMMONS LANG
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.7"


    ////// LOGGING
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.26' // License: MIT
    //compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.1' // License: Apache 2.0
    //compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.1' // License: Apache 2.0


    // --- Test Compile ---
    testCompile group: "junit", name: "junit", version: "4.12"
    testCompile group: "org.testng", name: "testng", version: "6.10"
}



sourceSets {
    main {
        java {
            srcDirs = ["src/main/java","build/generated-sources"]
            outputDir = file(project.buildDir.absolutePath + "/classes")
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/classes")
    }
    test {
        java {
            srcDirs = ["src/test/java"]
            outputDir = file(project.buildDir.absolutePath + "/test-classes")
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
        output.resourcesDir = file(project.buildDir.absolutePath + "/test-classes")
    }
}



/**
 * JARs
 */
jar {
    manifest {
        attributes "Manifest-Version": "1.0"
        attributes "Copyright": "Databases and Information Systems Group, Department Mathematics and Computer Science, University of Basel, Switzerland"
        attributes "Version": "$version"
    }
}
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier "sources"
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}
shadowJar {
    classifier = ''
}
assemble.dependsOn shadowJar
artifacts {
    //archives jar // regular jar containing only the compiled source
    archives shadowJar // fat jar which additionally contains all dependencies
    archives sourcesJar // jar file containing the java doc files
    archives javadocJar // jar file containing the source files
}



/**
 * IntelliJ
 */
idea {
    module {
        downloadJavadoc = true
        downloadSources = true

        inheritOutputDirs = false
        outputDir = file("${project.buildDir}/classes")
        testOutputDir = file("${project.buildDir}/test-classes")
    }
}